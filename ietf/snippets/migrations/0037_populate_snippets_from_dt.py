# -*- coding: utf-8 -*-
# Generated by Django 1.11.25 on 2020-02-06 21:41
from __future__ import unicode_literals

from django.db import migrations

def forward(apps, schema_editor):
    MailingListSignup = apps.get_model('snippets', 'MailingListSignup')
    RFC = apps.get_model('snippets', 'RFC')
    Charter = apps.get_model('snippets','Charter')
    snippetWorkingGroup = apps.get_model('snippets', 'WorkingGroup')

    dtWorkingGroup = apps.get_model('datatracker', 'WorkingGroup')
    dtRFC = apps.get_model('datatracker', 'RFC')
    dtCharter = apps.get_model('datatracker', 'Charter')
    HomePage = apps.get_model('home', 'HomePage')
    BibliographyItem = apps.get_model('bibliography', 'BibliographyItem')

    def get_working_group_acronym(obj):
         wg = dtWorkingGroup.objects.filter(
             resource_uri=obj.group,
             active=True
         ).first()
         return wg.acronym if wg else None

    rfcs_to_migrate = set([HomePage.objects.last().highlighted_request_for_comment])
    rfcs_to_migrate.update(dtRFC.objects.filter(pk__in=BibliographyItem.objects.filter(content_type__app_label='datatracker',content_type__model='rfc').values_list('object_id',flat=True).distinct()))

    charters_to_migrate = set(dtCharter.objects.filter(pk__in=BibliographyItem.objects.filter(content_type__app_label='datatracker',content_type__model='charter').values_list('object_id',flat=True).distinct()))

    acronyms_to_migrate = set(MailingListSignup.objects.values_list('working_group__acronym',flat=True))
    acronyms_to_migrate.update([HomePage.objects.last().highlighted_working_group.acronym])
    acronyms_to_migrate.update([get_working_group_acronym(rfc) for rfc in rfcs_to_migrate])
    acronyms_to_migrate.update([get_working_group_acronym(charter) for charter in charters_to_migrate])
    acronyms_to_migrate.discard(None)

    for acronym in acronyms_to_migrate:
        if acronym == 'appsawg':
            dtwg = dtWorkingGroup.objects.get(acronym=acronym) # the appsawg object is damaged, but the part we're migrating is ok
        else:
            dtwg = dtWorkingGroup.objects.filter(acronym=acronym, active=True).first()
        snippetWorkingGroup.objects.create(
            name = dtwg.name,
            acronym = dtwg.acronym,
            description = dtwg.description,
            list_email = dtwg.list_email,
            list_subscribe = dtwg.list_subscribe,
        )

    for rfc in sorted(rfcs_to_migrate, key = lambda o: o.pk):
        acronym = get_working_group_acronym(rfc)
        RFC.objects.create(
            name = rfc.name,
            title = rfc.title,
            rfc = rfc.rfc,
            abstract = rfc.abstract,
            working_group = acronym and snippetWorkingGroup.objects.get(acronym=acronym),
        )

    for charter in sorted(charters_to_migrate, key = lambda o: o.pk):
        acronym = get_working_group_acronym(rfc)
        Charter.objects.create(
            name = charter.name,
            title = charter.title,
            abstract = charter.abstract,
            working_group = acronym and snippetWorkingGroup.objects.get(acronym=acronym)
        )

def reverse(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('snippets', '0036_move_dt_classes_to_snippets'),
        ('home', '0006_auto_20160315_1435'),
    ]

    operations = [
        migrations.RunPython(forward, reverse)
    ]
